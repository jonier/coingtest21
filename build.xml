<?xml version="1.0" encoding="UTF-8"?>
<project name="gocoin-php" default="build">

  <property name="output_dir" value="target"/>
  <property name="application" value="gocoin-php"/>
  <property name="live_dir" value="/var/www/html/live/${application}"/>

  <!-- make environment vars available -->
  <property environment="env"/>

  <condition property="build_num" value="${env.BUILD_NUMBER}">
    <isset property="env.BUILD_NUMBER"/>
  </condition>

  <condition property="build_num" value="X">
    <not><isset property="env.BUILD_NUMBER"/></not>
  </condition>

  <target name="build"
      depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit,phpcb,deploy"
    />

  <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

  <target name="tools-parallel" description="Run tools in parallel">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="phpcpd"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc"/>
      <antcall target="phpdox"/>
      </parallel>
  </target>

  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${basedir}/${output_dir}/api"/>
    <delete dir="${basedir}/${output_dir}/api-test"/>
    <delete dir="${basedir}/${output_dir}/code-browser"/>
    <delete dir="${basedir}/${output_dir}/coverage"/>
    <delete dir="${basedir}/${output_dir}/logs"/>
    <delete dir="${basedir}/${output_dir}/pdepend"/>
    <delete dir="${basedir}/${output_dir}/phpdox"/>
    <delete dir="${basedir}/${output_dir}/phpdox-test"/>
    <delete dir="${basedir}/${output_dir}/deployment"/>
    <delete dir="${basedir}/${output_dir}/xml"/>
  </target>

  <target name="prepare" depends="clean" description="Prepare for build">
    <mkdir dir="${basedir}/${output_dir}"/>
    <mkdir dir="${basedir}/${output_dir}/api"/>
    <mkdir dir="${basedir}/${output_dir}/code-browser"/>
    <mkdir dir="${basedir}/${output_dir}/coverage"/>
    <mkdir dir="${basedir}/${output_dir}/logs"/>
    <mkdir dir="${basedir}/${output_dir}/pdepend"/>
    <mkdir dir="${basedir}/${output_dir}/phpdox"/>
  </target>

  <target name="lint" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true">
      <arg value="-l"/>
       <fileset dir="${basedir}/src">
        <include name="**/*.php"/>
        <exclude name="**/nusoap-0.9.5/*"/>
        <modified/>
       </fileset>
       <fileset dir="${basedir}/test">
        <include name="**/*.php"/>
        <modified/>
       </fileset>
    </apply>
  </target>

  <target name="phploc" description="Measure project size using PHPLOC">
    <exec executable="phploc">
      <arg value="--log-csv"/>
      <arg value="${basedir}/${output_dir}/logs/phploc.csv"/>
      <arg path="${basedir}/src"/>
    </exec>
    <exec executable="phploc">
      <arg value="--count-tests"/>
      <arg value="--log-xml"/>
      <arg value="${basedir}/${output_dir}/logs/phploc.xml"/>
      <arg path="${basedir}/src"/>
      <arg path="${basedir}/test"/>
    </exec>
  </target>

  <target name="pdepend" description="Calculate software metrics using PHP_Depend">
    <exec executable="pdepend">
      <arg value="--jdepend-xml=${basedir}/${output_dir}/logs/jdepend.xml"/>
      <arg value="--jdepend-chart=${basedir}/${output_dir}/pdepend/dependencies.svg"/>
      <arg value="--overview-pyramid=${basedir}/${output_dir}/pdepend/overview-pyramid.svg"/>
      <arg value="--exclude=lib,ltsoapapi"/>
      <arg path="${basedir}/src"/>
    </exec>
  </target>

  <target name="phpmd"
    description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="phpmd">
      <arg path="${basedir}/src"/>
      <arg value="text"/>
      <arg value="${basedir}/${output_dir}/phpmd.xml"/>
    </exec>
  </target>

  <target name="phpmd-ci"
    description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
    <exec executable="phpmd">
      <arg path="${basedir}/src"/>
      <arg value="xml"/>
      <arg value="${basedir}/build/phpmd.xml"/>
      <arg value="--reportfile"/>
      <arg value="${basedir}/${output_dir}/logs/pmd.xml"/>
      <arg value="--exclude"/>
      <arg value="lib,ltsoapapi"/>
    </exec>
  </target>

  <target name="phpcs"
    description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="phpcs">
      <arg value="--standard=${basedir}/build/phpcs.xml"/>
      <arg value="--ignore=lib,ltsoapapi"/>
      <arg path="${basedir}/src"/>
    </exec>
  </target>

  <target name="phpcs-ci"
    description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    <exec executable="phpcs" output="/dev/null">
      <arg value="-s"/>
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=${basedir}/${output_dir}/logs/checkstyle.xml"/>
      <arg value="--standard=${basedir}/build/phpcs.xml"/>
      <arg value="--ignore=TrackVia"/>
      <arg path="${basedir}/src"/>
    </exec>
  </target>

  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="phpcpd">
      <arg value="--exclude"/>
      <arg value="backup,lib,ltsoapapi"/>
      <arg value="--log-pmd"/>
      <arg value="${basedir}/${output_dir}/logs/pmd-cpd.xml"/>
      <arg path="${basedir}/src"/>
    </exec>
  </target>

  <target name="phpdox" description="Generate API documentation using phpDox"
    depends="phpdox-main"/>
    <!-- depends="phpdox-main,phpdox-test"/> -->
 
  <target name="phpdox-main" description="Generate API documentation for Main classes using phpDox">
    <exec executable="phpdox">
      <arg value="-f"/>
      <arg value="${basedir}/build/phpdox.xml"/>
    </exec>
  </target>

  <target name="phpdox-test" description="Generate API documentation for Tests using phpDox">
    <exec executable="phpdox">
      <arg value="-f"/>
      <arg value="${basedir}/build/phpdox-test.xml"/>
    </exec>
  </target>

  <target name="phpunit" description="Run unit tests with PHPUnit">
    <exec executable="phpunit" failonerror="true">
      <arg value="--configuration"/>
      <arg value="${basedir}/build/phpunit.xml"/>
    </exec>
  </target>

  <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
    <exec executable="phpcb">
      <arg value="--log"/>
      <arg path="${basedir}/${output_dir}/logs"/>
      <arg value="--source"/>
      <arg path="${basedir}/src"/>
      <arg value="--output"/>
      <arg path="${basedir}/${output_dir}/code-browser"/>
    </exec>
  </target>

  <target name="deploy">
    <echo message="[DEBUG]: Starting deployment..."/>
    <!-- delete any previous deployments -->
    <delete dir="${output_dir}/deployment"/>
    <!-- make a new directory -->
    <mkdir dir="${output_dir}/deployment"/>
    <!-- copy all the files we want -->
    <copy todir="${output_dir}/deployment">
     <fileset dir="${basedir}">
        <include name="README.md"/>
     </fileset>
    </copy>
    <!-- copy all the files we want -->
    <copy todir="${output_dir}/deployment/src">
     <fileset dir="${basedir}/src">
        <include name="**/*"/>
     </fileset>
    </copy>
    <!-- copy all the files we want -->
    <copy todir="${output_dir}/deployment/examples">
     <fileset dir="${basedir}/examples">
        <include name="**/*"/>
        <exclude name="includes/config.php"/>
        <exclude name="includes/config_api.php"/>
     </fileset>
    </copy>
    <!-- create a gzipp'd tarball -->
    <tar destfile="${output_dir}/deployment/${application}.tar" basedir="${output_dir}/deployment">
    </tar>
    <gzip destfile="${output_dir}/deployment/${application}.${build_num}.tar.gz"
      src="${output_dir}/deployment/${application}.tar"/>
    <!-- delete the tar we no longer need -->
    <delete file="${output_dir}/deployment/${application}.tar"/>
    <!-- create a gzipp'd tarball -->
    <tar destfile="${output_dir}/deployment/${application}.docs.tar">
      <tarfileset dir="${output_dir}">
<!--
        <include name="api/**"/>
        <include name="api-test/**"/>
        <include name="code-browser/**"/>
        <include name="coverage/**"/>
        <include name="pdepend/**"/>
-->
        <exclude name="deployment/**"/>
        <exclude name="logs/**"/>
        <exclude name="pdepend/**"/>
        <exclude name="phpdox/**"/>
        <exclude name="phpdox-test/**"/>
        <exclude name="xml/**"/>
      </tarfileset>
    </tar>
    <gzip destfile="${output_dir}/deployment/${application}.docs.${build_num}.tar.gz"
      src="${output_dir}/deployment/${application}.docs.tar"/>
    <!-- delete the tar we no longer need -->
    <delete file="${output_dir}/deployment/${application}.docs.tar"/>
  </target>

  <target name="golive">
    <!-- delete any previous deployments -->
    <delete dir="${live_dir}"/>
    <!-- make a new directory -->
    <mkdir dir="${live_dir}"/>
    <!-- untar the archive -->
    <untar src="${output_dir}/deployment/${application}.${build_num}.tar.gz"
      dest="${live_dir}" compression="gzip"/>
  </target>


</project>
